// Optimized Alloy Configuration for 1-minute rates

otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
    max_recv_msg_size = "4MiB"
    max_concurrent_streams = 100
  }
  
  http {
    endpoint = "0.0.0.0:4318"
  }
  
  output {
    traces  = [otelcol.processor.batch.traces.input]
    metrics = [otelcol.processor.batch.metrics.input]
    logs    = [otelcol.processor.batch.logs.input]
  }
}

// FASTER batch processing for metrics
otelcol.processor.batch "metrics" {
  timeout = "500ms"       // Very fast - good for 1min rates
  send_batch_size = 256   // Small batches for faster processing
  
  output {
    metrics = [otelcol.exporter.prometheus.default.input]
  }
}

// Keep traces and logs as they were
otelcol.processor.batch "traces" {
  timeout = "1s"
  send_batch_size = 1024
  send_batch_max_size = 2048
  
  output {
    traces = [otelcol.exporter.otlp.tempo.input]
  }
}

otelcol.processor.batch "logs" {
  timeout = "1s"
  send_batch_size = 1024
  
  output {
    logs = [otelcol.exporter.loki.default.input]
  }
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "http://tempo:4317"
    tls {
      insecure = true
    }
  }
}

otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.mimir.receiver]
  resource_to_telemetry_conversion = true
}

otelcol.exporter.loki "default" {
  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}

// Write metrics to Prometheus
prometheus.remote_write "mimir" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
    
    send_exemplars = true
    send_native_histograms = true
    
    // Aggressive settings for speed
  queue_config {
    batch_send_deadline = "1s"   // Fast sending
    max_samples_per_send = 256   // Small batches
    max_shards = 20             // Parallel processing
  }

    write_relabel_config {
      source_labels = ["__name__"]
      regex = ".*"
      action = "keep"
    }
  }
}

prometheus.exporter.self "alloy" {}

prometheus.scrape "alloy_self" {
  targets = prometheus.exporter.self.alloy.targets
  forward_to = [prometheus.remote_write.mimir.receiver]
  scrape_interval = "10s"  // Faster scraping
}

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
  
  filter {
    name = "label"
    values = ["monitoring.scrape=true"]
  }
}

prometheus.scrape "docker_containers" {
  targets = discovery.docker.containers.targets
  forward_to = [prometheus.remote_write.mimir.receiver]
  scrape_interval = "10s"  // Faster scraping
}